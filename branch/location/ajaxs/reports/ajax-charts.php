<?php
require_once("../../../../app/v1/connection-branch-admin.php");
$headerData = array('Content-Type: application/json');

//$companyID = $_SESSION['logedBranchAdminInfo']['fldAdminCompanyId'];

$payload = [];

//---------------------------------Start--------------------------------
//------------ Current date
$currentDate = date('Y-m-d');
//------------ 7 days ago
$sevenDaysAgo = date('Y-m-d', strtotime('-7 days'));

//----------------------quickDrop---------------------------

if (isset($_GET['asOnDate'])) {
    $asOnDate=$_GET['asOnDate'];
}

//----------------------itemCode---------------------------
if (isset($_GET['itemCode'])) {
    $itemCode = $_GET['itemCode'];
} else {
    $itemCode = '';
}
//----------------------profitCenter-----------------------
if (isset($_GET['profitCenter'])) {
    $profitCenter = $_GET['profitCenter'];
} else {
    $profitCenter = '';
}
//----------------------specificDay------------------------
if (isset($_GET['specificDay'])) {
    $specificDay = $_GET['specificDay'];
} else {
    $specificDay = $currentDate;
}

//----------------------monthRange-------------------------
if (isset($_GET['monthRange'])) {
    $selectedMonth = $_GET['monthRange'];

    // Calculate the start and end dates of the selected month
    $monthFromRange = date('Y-m-01', strtotime("{$selectedMonth}-01"));
    $monthToRange = date('Y-m-t', strtotime("{$selectedMonth}-01"));
} else {
    $monthFromRange = date('Y-m-01');
    $monthToRange = date('Y-m-t');
}
//-------------------------------------------------------

//----------------------fiscal year-------------------------
if (isset($_GET['fYDropdown'])) {
    $year_id = $_GET['fYDropdown'];
    $year_sql = queryGet("SELECT * FROM `erp_year_variant` WHERE `year_variant_id`=$year_id");
    $data = $year_sql['data'];

    $start = explode('-', $data['year_start']);
    $end = explode('-', $data['year_end']);
    $startDate = date('Y-m-t', strtotime("$end[0]-$end[1]"));
    $endDate = date('Y-m-01', strtotime("$start[0]-$start[1]"));

    $toDate  = $startDate;
    $fromDate = $endDate;
} 
//-------------------------------------------------------

if (!empty($_GET['search'])) {
    updateInsertDashTableSettings($_GET);
}

//--------------------------End-----------------------------

// ADDING DATA TO PAYLOAD ON CONDITION
if ($_GET['chart'] == 'dailyPeriodicSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["dailyPeriodicSales"] = queryGet("SELECT invoice_date,SUM(sub_total_amt - totalDiscount) AS total_revenue FROM erp_branch_sales_order_invoices WHERE company_id=$company_id AND branch_id=$branch_id AND location_id=$location_id AND invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND status='active' GROUP BY invoice_date", true);
} else if ($_GET['chart'] == 'monthlyPeriodicSales') {
    // $payload["monthlyPeriodicSales"] = queryGet("SELECT date_format(invoice_date,'%M') AS month,SUM(sub_total_amt - totalDiscount) AS total_revenue FROM erp_branch_sales_order_invoices WHERE company_id=$company_id AND branch_id=$branch_id AND location_id=$location_id AND invoice_date BETWEEN '".$fromDate."' AND '".$toDate."' AND status='active' GROUP BY month", true);

} else if ($_GET['chart'] == 'yearlyPeriodicSales') {
    // $payload["yearlyPeriodicSales"] = queryGet("SELECT SUM(sub_total_amt - totalDiscount) AS total_revenue FROM erp_branch_sales_order_invoices WHERE company_id=$company_id AND branch_id=$branch_id AND location_id=$location_id AND invoice_date BETWEEN '".$fromDate."' AND '".$toDate."' AND status='active'", true);

} else if ($_GET['chart'] == 'dailyProductQuantityWiseSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["dailyProductQuantityWiseSales"] = queryGet("SELECT date_format(invoices.invoice_date,'%Y-%m-%d') AS date_ , items.itemName AS item_name , SUM(qty) AS total_qty FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND branch_id=$branch_id AND location_id=$location_id  AND items.itemCode=$itemCode AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY date_,item_name ORDER BY date_", true);
} else if ($_GET['chart'] == 'dailyProductPriceWiseSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["dailyProductPriceWiseSales"] = queryGet("SELECT date_format(invoices.invoice_date,'%Y-%m-%d') AS date_ , items.itemName AS item_name , SUM(items.totalPrice) AS total_amount FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND  items.itemCode=$itemCode AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY date_,item_name ORDER BY date_", true);
} else if ($_GET['chart'] == 'monthlyProductQuantityWiseSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["monthlyProductQuantityWiseSales"] = queryGet("SELECT  date_format(invoices.invoice_date,'%M') AS month , items.itemName AS item_name , SUM(qty) AS total_qty  FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND items.itemCode=$itemCode AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY month,item_name ORDER BY STR_TO_DATE(CONCAT('0001 ', month, ' 01'), '%Y %M %d')", true);
} else if ($_GET['chart'] == 'monthlyProductPriceWiseSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["monthlyProductPriceWiseSales"] = queryGet("SELECT date_format(invoices.invoice_date,'%M') AS month , items.itemName AS item_name , SUM(items.totalPrice) AS total_amount FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND items.itemCode=$itemCode AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY month,item_name ORDER BY STR_TO_DATE(CONCAT('0001 ', month, ' 01'), '%Y %M %d')", true);
} else if ($_GET['chart'] == 'yearlyProductQuantityWiseSales') {
    $payload["yearlyProductQuantityWiseSales"] = queryGet("SELECT items.itemName AS item_name , SUM(items.qty) AS total_qty FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY item_name ORDER BY total_qty desc limit 10", true);
} else if ($_GET['chart'] == 'yearlyProductPriceWiseSales') {
    $payload["yearlyProductPriceWiseSales"] = queryGet("SELECT items.itemName AS item_name , SUM(items.totalPrice) AS total_amount FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY item_name Order By total_amount desc limit 10", true);
} else if ($_GET['chart'] == 'productQuantityWiseSalesOnDate') {
    $payload["productQuantityWiseSalesOnDate"] = queryGet("SELECT items.itemName AS item_name, SUM(items.qty) AS total_qty FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id = items.so_invoice_id WHERE invoices.company_id = $company_id AND invoices.branch_id = $branch_id AND invoices.location_id = $location_id AND invoices.invoice_date = '" . $specificDay . "' GROUP BY item_name ORDER BY total_qty desc limit 10", true);
} else if ($_GET['chart'] == 'productPriceWiseSalesOnDate') {
    $payload["productPriceWiseSalesOnDate"] = queryGet("SELECT items.itemName AS item_name , SUM(items.totalPrice) AS total_amount FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND invoices.invoice_date = '" . $specificDay . "' GROUP BY item_name ORDER BY total_amount desc limit 10", true);
} else if ($_GET['chart'] == 'productQuantityWiseSalesOnMonth') {
    $payload["productQuantityWiseSalesOnMonth"] = queryGet("SELECT items.itemName AS item_name , SUM(items.qty) AS total_qty FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND invoices.invoice_date BETWEEN '" . $monthFromRange . "' AND '" . $monthToRange . "' GROUP BY item_name ORDER BY total_qty desc limit 10", true);
} else if ($_GET['chart'] == 'productPriceWiseSalesOnMonth') {
    $payload["productPriceWiseSalesOnMonth"] = queryGet("SELECT items.itemName AS item_name , SUM(items.totalPrice) AS total_amount FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND invoices.invoice_date BETWEEN '" . $monthFromRange . "' AND '" . $monthToRange . "' GROUP BY item_name ORDER BY total_amount desc limit 10", true);
} else if ($_GET['chart'] == 'dailyProfitCenterWiseSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["dailyProfitCenterWiseSales"] = queryGet("SELECT date_format(invoices.invoice_date,'%Y-%m-%d') as date_, SUM(invoices.all_total_amt) AS total_amount FROM (SELECT so.so_id, so.so_number as so_number,pc.functionalities_id as profit_center FROM erp_branch_sales_order AS so LEFT JOIN erp_company_functionalities as pc ON so.profit_center=pc.functionalities_id WHERE so.company_id=$company_id AND so.branch_id=$branch_id AND so.location_id=$location_id) AS so_pc INNER JOIN erp_branch_sales_order_invoices AS invoices ON so_pc.so_id=invoices.so_id WHERE invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND so_pc.profit_center='" . $profitCenter . "' GROUP BY date_ ORDER BY date_", true);
} else if ($_GET['chart'] == 'monthlyProfitCenterWiseSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["monthlyProfitCenterWiseSales"] = queryGet("SELECT date_format(invoices.invoice_date,'%M') as month, SUM(invoices.all_total_amt) AS total_amount FROM (SELECT so.so_id, so.so_number as so_number,pc.functionalities_id as profit_center FROM erp_branch_sales_order AS so LEFT JOIN erp_company_functionalities as pc ON so.profit_center=pc.functionalities_id WHERE so.company_id=$company_id AND so.branch_id=$branch_id AND so.location_id=$location_id) AS so_pc INNER JOIN erp_branch_sales_order_invoices AS invoices ON so_pc.so_id=invoices.so_id WHERE invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND so_pc.profit_center='" . $profitCenter . "' GROUP BY month ORDER BY STR_TO_DATE(CONCAT('0001 ', month, ' 01'), '%Y %M %d')", true);
} else if ($_GET['chart'] == 'yearlyProfitCenterWiseSales') {
    $payload["yearlyProfitCenterWiseSales"] = queryGet("SELECT so_pc.profit_center AS profit_center, SUM(invoices.all_total_amt) AS total_amount FROM (SELECT so.so_id, so.so_number as so_number,pc.functionalities_name as profit_center FROM erp_branch_sales_order AS so LEFT JOIN erp_company_functionalities as pc ON so.profit_center=pc.functionalities_id WHERE so.company_id=$company_id AND so.branch_id=$branch_id AND so.location_id=$location_id) AS so_pc INNER JOIN erp_branch_sales_order_invoices AS invoices ON so_pc.so_id=invoices.so_id WHERE invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY profit_center ORDER BY total_amount DESC", true);
} else if ($_GET['chart'] == 'productQuantityWiseSalesProfitCenter') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));

    $payload["productQuantityWiseSalesProfitCenter"] = queryGet("SELECT so_pc.profit_center AS profit_center,items.itemName AS item_name,SUM(items.qty) AS total_qty FROM (SELECT so.so_id, so.so_number as so_number,pc.functionalities_name as profit_center FROM erp_branch_sales_order AS so LEFT JOIN erp_company_functionalities as pc ON so.profit_center=pc.functionalities_id WHERE so.company_id=$company_id AND so.branch_id=$branch_id AND so.location_id=$location_id) AS so_pc INNER JOIN erp_branch_sales_order_invoices AS invoices ON so_pc.so_id=invoices.so_id INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY profit_center,item_name ORDER BY profit_center,total_qty DESC LIMIT 5", true);
} else if ($_GET['chart'] == 'productPriceWiseSalesProfitCenter') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["productPriceWiseSalesProfitCenter"] = queryGet("SELECT so_pc.profit_center AS profit_center,items.itemName AS item_name,SUM(items.totalPrice) AS total_price FROM (SELECT so.so_id, so.so_number as so_number,pc.functionalities_name as profit_center FROM erp_branch_sales_order AS so LEFT JOIN erp_company_functionalities as pc ON so.profit_center=pc.functionalities_id WHERE so.company_id=$company_id AND so.branch_id=$branch_id AND so.location_id=$location_id) AS so_pc INNER JOIN erp_branch_sales_order_invoices AS invoices ON so_pc.so_id=invoices.so_id INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id WHERE invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY profit_center,item_name ORDER BY profit_center,total_price DESC LIMIT 5", true);
} else if ($_GET['chart'] == 'kamWiseQuantityProductGroupSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["kamWiseQuantityProductGroupSales"] = queryGet("SELECT table2.kamName AS kam_name,table1.goodGroupName,SUM(table2.qty) AS total_qty FROM (SELECT items.itemCode,items.itemName,groups.goodGroupName FROM erp_inventory_items AS items INNER JOIN erp_inventory_mstr_good_groups AS groups ON items.goodsGroup=groups.goodGroupId WHERE items.company_id=$company_id) AS table1 INNER JOIN (SELECT items.itemCode,items.qty,invoices.kamId,kam.kamName FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id LEFT JOIN erp_kam AS kam ON invoices.kamId = kam.kamId WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "') AS table2 ON table1.itemCode = table2.itemCode GROUP BY kam_name,table1.goodGroupName ORDER BY total_qty desc LIMIT 5", true);
} /*else if ($_GET['chart'] == 'kamWisePriceProductGroupSales') {
    $payload["kamWisePriceProductGroupSales"] = queryGet("SELECT table2.kamName AS kam_name,table1.goodGroupName,SUM(table2.basePrice - table2.totalDiscountAmt) AS total_price FROM (SELECT items.itemCode,items.itemName,groups.goodGroupName FROM erp_inventory_items AS items INNER JOIN erp_inventory_mstr_good_groups AS groups ON items.goodsGroup=groups.goodGroupId WHERE items.company_id=$company_id) AS table1 INNER JOIN (SELECT items.itemCode,items.qty,items.basePrice, items.totalDiscountAmt,invoices.kamId,kam.kamName FROM erp_branch_sales_order_invoices AS invoices INNER JOIN erp_branch_sales_order_invoice_items AS items ON invoices.so_invoice_id=items.so_invoice_id LEFT JOIN erp_kam AS kam ON invoices.kamId = kam.kamId WHERE invoices.company_id=$company_id AND invoices.branch_id=$branch_id AND invoices.location_id=$location_id AND invoices.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "') AS table2 ON table1.itemCode = table2.itemCode GROUP BY kam_name,table1.goodGroupName ORDER BY total_price desc", true);
}*/ else if ($_GET['chart'] == 'kamWisePriceProductGroupSales') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["kamWisePriceProductGroupSales"] = queryGet("SELECT kam.kamName AS kam_name, groups.goodGroupName, SUM(inv_item.totalPrice) AS total_price FROM erp_kam AS kam LEFT JOIN erp_branch_sales_order_invoices AS inv ON kam.kamId = inv.kamId LEFT JOIN erp_branch_sales_order_invoice_items AS inv_item ON inv.so_invoice_id = inv_item.so_invoice_id LEFT JOIN erp_inventory_items AS item ON inv_item.inventory_item_id = item.itemId LEFT JOIN erp_inventory_mstr_good_groups AS groups ON item.goodsGroup = groups.goodGroupId WHERE inv.company_id=$company_id AND inv.branch_id=$branch_id AND inv.location_id=$location_id AND inv.invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND totalPrice != 0 GROUP BY kam.kamName, groups.goodGroupName ORDER BY total_price DESC LIMIT 5;", true);
} else if ($_GET['chart'] == 'kamWiseReceivables') {
    $asOnDate=$_GET['quickDrop'];
    // console($asOnDate);
    $sql="SELECT kamCode, kamName, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'COLLECTION' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'BALANCE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) AS net_due, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) AS total_due, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END ) AS `0-30_days_due`, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END ) AS `31-60_days_due`, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END ) AS `61-90_days_due`, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END ) AS `91-120_days_due`, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END ) AS `121-150_days_due`, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END ) AS `151-180_days_due`, SUM( CASE WHEN transaction_type = 'INVOICE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END ) - SUM( CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END ) + SUM( CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END ) AS `more_than_180_days_due` FROM ( SELECT kam.kamCode, kam.kamName, inv.invoice_date AS posting_date, 'INVOICE' AS transaction_type, COALESCE(inv.due_amount, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_invoices AS inv ON cust.customer_id = inv.customer_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId LEFT JOIN erp_branch_sales_order AS so ON inv.so_id = so.so_id LEFT JOIN erp_branch_sales_order_delivery_pgi AS pgi ON inv.pgi_id = pgi.so_delivery_pgi_id WHERE inv.company_id = $company_id AND inv.branch_id = $branch_id AND inv.location_id = $location_id AND inv.status = 'active' AND kam.company_id = $company_id UNION ALL SELECT kam.kamCode, kam.kamName, inv.invoice_date AS posting_date, 'TAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference != 0 AND kam.company_id = $company_id UNION ALL SELECT kam.kamCode, kam.kamName, cn.postingDate AS posting_date, 'UNTAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference = 0 AND kam.company_id = $company_id UNION ALL SELECT kam.kamCode, kam.kamName, dn.postingDate AS posting_date, 'DEBIT NOTE' AS transaction_type, COALESCE(dn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_debit_note AS dn ON cust.customer_id = dn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON dn.debitNoteReference = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE dn.company_id = $company_id AND dn.branch_id = $branch_id AND dn.location_id = $location_id AND dn.status = 'active' AND dn.debitor_type = 'customer' AND kam.company_id = $company_id UNION ALL SELECT kam.kamCode, kam.kamName, col.postingDate AS posting_date, 'COLLECTION' AS transaction_type, COALESCE(log.payment_amt, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_payments AS col ON cust.customer_id = col.customer_id LEFT JOIN erp_branch_sales_order_payments_log AS log ON col.payment_id = log.payment_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON log.invoice_id = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE log.payment_type = 'advanced' AND col.company_id = $company_id AND col.branch_id = $branch_id AND col.location_id = $location_id AND col.status = 'active' AND kam.company_id = $company_id UNION ALL SELECT kam.kamCode, kam.kamName, bal.date AS posting_date, 'BALANCE' AS transaction_type, COALESCE(bal.balance, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_receiveable_balance AS bal ON cust.customer_id = bal.customer_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON inv.customer_id = cust.customer_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE bal.company_id = $company_id AND bal.branch_id = $branch_id AND bal.location_id = $location_id AND kam.company_id = $company_id ) AS subquery GROUP BY kamCode;";
    $res=queryGet($sql, true);
    $payload["kamWiseReceivables"] = $res;

} else if ($_GET['chart'] == 'kamWiseReceivablesOnAccount') {
        $asOnDate=$_GET['quickDrop'];
        $sql="SELECT kamCode, kamName, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) AS net_due, SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) AS total_onaccount, SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) AS '0-30_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN (-1)*total_amount ELSE 0 END) AS '31-60_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN (-1)*total_amount ELSE 0 END) AS '61-90_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN (-1)*total_amount ELSE 0 END) AS '91-120_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN (-1)*total_amount ELSE 0 END) AS '121-150_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN (-1)*total_amount ELSE 0 END) AS '151-180_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN (-1)*total_amount ELSE 0 END) AS 'more_than_180_days_onaccount' FROM ( SELECT kam.kamCode, kam.kamName, inv.invoice_date AS posting_date, 'INVOICE' AS transaction_type, COALESCE(inv.due_amount, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_invoices AS inv ON cust.customer_id = inv.customer_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId LEFT JOIN erp_branch_sales_order AS so ON inv.so_id = so.so_id LEFT JOIN erp_branch_sales_order_delivery_pgi AS pgi ON inv.pgi_id = pgi.so_delivery_pgi_id WHERE inv.company_id = $company_id AND inv.branch_id = $branch_id AND inv.location_id = $location_id AND inv.status = 'active' AND kam.company_id=$company_id UNION ALL SELECT kam.kamCode, kam.kamName, inv.invoice_date AS posting_date, 'TAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference != 0 AND kam.company_id=$company_id UNION ALL SELECT kam.kamCode, kam.kamName, cn.postingDate AS posting_date, 'UNTAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference = 0 AND kam.company_id=$company_id UNION ALL SELECT kam.kamCode, kam.kamName, dn.postingDate AS posting_date, 'DEBIT NOTE' AS transaction_type, COALESCE(dn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_debit_note AS dn ON cust.customer_id = dn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON dn.debitNoteReference = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE dn.company_id = $company_id AND dn.branch_id = $branch_id AND dn.location_id = $location_id AND dn.status = 'active' AND dn.debitor_type = 'customer' AND kam.company_id=$company_id UNION ALL SELECT kam.kamCode, kam.kamName, col.postingDate AS posting_date, 'COLLECTION' AS transaction_type, COALESCE(log.payment_amt, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_payments AS col ON cust.customer_id = col.customer_id LEFT JOIN erp_branch_sales_order_payments_log AS log ON col.payment_id = log.payment_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON log.invoice_id = inv.so_invoice_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE log.payment_type = 'advanced' AND col.company_id = $company_id AND col.branch_id = $branch_id AND col.location_id = $location_id AND col.status='active' AND kam.company_id=$company_id UNION ALL SELECT kam.kamCode, kam.kamName, bal.date AS posting_date, 'BALANCE' AS transaction_type, COALESCE(bal.balance, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_receiveable_balance AS bal ON cust.customer_id = bal.customer_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON inv.customer_id = cust.customer_id LEFT JOIN erp_kam as kam ON kam.kamId = inv.kamId WHERE bal.company_id = $company_id AND bal.branch_id = $branch_id AND bal.location_id = $location_id AND kam.company_id=$company_id ) AS subquery GROUP BY kamCode;";
        $res=queryGet($sql, true);        
        $payload["kamWiseReceivablesOnAccount"] = $res;
    

} else if ($_GET['chart'] == 'customerWiseReceivables') {

    $asOnDate=$_GET['quickDrop'];

    $sql = "SELECT customer_code, customer_name, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) AS net_due, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) AS total_due, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) AS `0-30_days_due`, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END) AS `31-60_days_due`, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END) AS `61-90_days_due`, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END) AS `91-120_days_due`, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END) AS `121-150_days_due`, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END) AS `151-180_days_due`, SUM(CASE WHEN transaction_type = 'INVOICE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END) - SUM(CASE WHEN transaction_type = 'TAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'DEBIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END) AS `more_than_180_days_due` FROM ( SELECT cust.customer_code, cust.trade_name AS customer_name, inv.invoice_date AS posting_date, 'INVOICE' AS transaction_type, COALESCE(inv.due_amount, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_invoices AS inv ON cust.customer_id = inv.customer_id LEFT JOIN erp_branch_sales_order AS so ON inv.so_id = so.so_id LEFT JOIN erp_branch_sales_order_delivery_pgi AS pgi ON inv.pgi_id = pgi.so_delivery_pgi_id WHERE inv.company_id = $company_id AND inv.branch_id = $branch_id AND inv.location_id = $location_id AND inv.status = 'active' UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, inv.invoice_date AS posting_date, 'TAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference != 0 UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, cn.postingDate AS posting_date, 'UNTAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference = 0 UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, dn.postingDate AS posting_date, 'DEBIT NOTE' AS transaction_type, COALESCE(dn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_debit_note AS dn ON cust.customer_id = dn.party_id WHERE dn.company_id = $company_id AND dn.branch_id = $branch_id AND dn.location_id = $location_id AND dn.status = 'active' AND dn.debitor_type = 'customer' UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, col.postingDate AS posting_date, 'COLLECTION' AS transaction_type, COALESCE(log.payment_amt, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_payments AS col ON cust.customer_id = col.customer_id LEFT JOIN erp_branch_sales_order_payments_log AS log ON col.payment_id = log.payment_id WHERE log.payment_type = 'advanced' AND col.company_id = $company_id AND col.branch_id = $branch_id AND col.location_id = $location_id AND col.status='active' UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, bal.date AS posting_date, 'BALANCE' AS transaction_type, COALESCE(bal.balance, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_receiveable_balance AS bal ON cust.customer_id = bal.customer_id WHERE bal.company_id = $company_id AND bal.branch_id = $branch_id AND bal.location_id = $location_id ) AS subquery GROUP BY customer_code LIMIT 5;";
    $res=queryGet($sql, true);        
    $payload["customerWiseReceivables"] = $res;

} else if ($_GET['chart'] == 'customerWiseReceivablesOnAccount') {


    $asOnDate=$_GET['quickDrop'];
    $sql = "SELECT customer_code, customer_name, SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) AS total_onaccount, SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 30 DAY AND posting_date <= CAST('$asOnDate' AS DATE) THEN (-1)*total_amount ELSE 0 END) AS '0-30_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 60 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 31 DAY THEN (-1)*total_amount ELSE 0 END) AS '31-60_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 90 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 61 DAY THEN (-1)*total_amount ELSE 0 END) AS '61-90_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 120 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 91 DAY THEN (-1)*total_amount ELSE 0 END) AS '91-120_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 150 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 121 DAY THEN (-1)*total_amount ELSE 0 END) AS '121-150_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date >= CAST('$asOnDate' AS DATE) - INTERVAL 180 DAY AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 151 DAY THEN (-1)*total_amount ELSE 0 END) AS '151-180_days_onaccount', SUM(CASE WHEN transaction_type = 'COLLECTION' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN (-1)*total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'BALANCE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN total_amount ELSE 0 END) + SUM(CASE WHEN transaction_type = 'UNTAGGED CREDIT NOTE' AND posting_date <= CAST('$asOnDate' AS DATE) - INTERVAL 181 DAY THEN (-1)*total_amount ELSE 0 END) AS 'more_than_180_days_onaccount' FROM ( SELECT cust.customer_code, cust.trade_name AS customer_name, inv.invoice_date AS posting_date, 'INVOICE' AS transaction_type, COALESCE(inv.due_amount, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_invoices AS inv ON cust.customer_id = inv.customer_id LEFT JOIN erp_branch_sales_order AS so ON inv.so_id = so.so_id LEFT JOIN erp_branch_sales_order_delivery_pgi AS pgi ON inv.pgi_id = pgi.so_delivery_pgi_id WHERE inv.company_id = $company_id AND inv.branch_id = $branch_id AND inv.location_id = $location_id AND inv.status = 'active' UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, inv.invoice_date AS posting_date, 'TAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference != 0 UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, cn.postingDate AS posting_date, 'UNTAGGED CREDIT NOTE' AS transaction_type, COALESCE(cn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_credit_note AS cn ON cust.customer_id = cn.party_id LEFT JOIN erp_branch_sales_order_invoices AS inv ON cn.creditNoteReference = inv.so_invoice_id WHERE cn.company_id = $company_id AND cn.branch_id = $branch_id AND cn.location_id = $location_id AND cn.status = 'active' AND cn.creditors_type = 'customer' AND cn.creditNoteReference = 0 UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, dn.postingDate AS posting_date, 'DEBIT NOTE' AS transaction_type, COALESCE(dn.total, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_debit_note AS dn ON cust.customer_id = dn.party_id WHERE dn.company_id = $company_id AND dn.branch_id = $branch_id AND dn.location_id = $location_id AND dn.status = 'active' AND dn.debitor_type = 'customer' UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, col.postingDate AS posting_date, 'COLLECTION' AS transaction_type, COALESCE(log.payment_amt, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_branch_sales_order_payments AS col ON cust.customer_id = col.customer_id LEFT JOIN erp_branch_sales_order_payments_log AS log ON col.payment_id = log.payment_id WHERE log.payment_type = 'advanced' AND col.company_id = $company_id AND col.branch_id = $branch_id AND col.location_id = $location_id AND col.status='active' UNION ALL SELECT cust.customer_code, cust.trade_name AS customer_name, bal.date AS posting_date, 'BALANCE' AS transaction_type, COALESCE(bal.balance, 0) AS total_amount FROM erp_customer AS cust LEFT JOIN erp_receiveable_balance AS bal ON cust.customer_id = bal.customer_id WHERE bal.company_id = $company_id AND bal.branch_id = $branch_id AND bal.location_id = $location_id ) AS subquery GROUP BY customer_code LIMIT 5;";
    $res=queryGet($sql, true); 
    $payload["customerWiseReceivablesOnAccount"] = $res;

} else if ($_GET['chart'] == 'vendorWisePayables') {
    $payload["vendorWisePayables"] = queryGet("SELECT vendorName,DATEDIFF(dueDate,CURDATE())AS due_days,COUNT(*) AS count_,SUM(dueAmt) AS total_due_amount FROM erp_grninvoice AS iv WHERE companyId=$company_id AND branchId=$branch_id AND locationId=$location_id AND postingDate BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND dueAmt!=0 AND dueDate>CURDATE() GROUP BY vendorName,due_days ORDER BY due_days", true);
} else if ($_GET['chart'] == 'salesOrderBook') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["salesOrderBook"] = queryGet("SELECT status_.label, COUNT(*) AS count,SUM(totalAmount) AS total_amount FROM erp_branch_sales_order AS so LEFT JOIN erp_status_master AS status_ ON so.approvalStatus=status_.code WHERE so.company_id=$company_id AND so.branch_id=$branch_id AND so.location_id=$location_id AND so.so_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY status_.label ORDER BY total_amount DESC", true);
} else if ($_GET['chart'] == 'purchaseOrderBook') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["purchaseOrderBook"] = queryGet("SELECT status_.label, COUNT(*) AS count,SUM(totalAmount) AS total_amount FROM erp_branch_purchase_order AS po LEFT JOIN erp_status_master AS status_ ON po.po_status=status_.code WHERE po.company_id=$company_id AND po.branch_id=$branch_id AND po.location_id=$location_id AND po.po_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY status_.label ORDER BY total_amount DESC", true);
} else if ($_GET['chart'] == 'salesVsCollection') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["salesVsCollection"] = [
        "revenue" => queryGet("SELECT invoice_date AS date_, SUM(sub_total_amt - totalDiscount) AS total_revenue , SUM(due_amount) AS receivable FROM erp_branch_sales_order_invoices WHERE company_id=$company_id AND branch_id=$branch_id AND location_id=$location_id AND invoice_date BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY date_ ORDER BY date_;", true),
        "collection" => queryGet("SELECT postingDate AS date_, SUM(collect_payment) AS collection FROM erp_branch_sales_order_payments WHERE company_id=$company_id AND branch_id=$branch_id AND location_id=$location_id AND postingDate BETWEEN '" . $fromDate . "' AND '" . $toDate . "' GROUP BY date_ ORDER BY date_;", true)
    ];
} else if ($_GET['chart'] == 'financialKeyHighlights') {
    $daysBack=$_GET['quickDrop'];
    $toDate = date('Y-m-d');
    $fromDate = date('Y-m-d', strtotime("-$daysBack days"));
    $payload["financialKeyHighlights"] = [
        "total_revenue" => queryGet("SELECT SUM(temp_table.amount) AS total_income FROM (SELECT coa.gl_code,coa.gl_label,debit.debit_amount AS amount FROM erp_acc_debit AS debit INNER JOIN erp_acc_journal AS journal ON debit.journal_id=journal.id LEFT JOIN erp_acc_coa_1_table AS coa ON debit.glId=coa.id WHERE journal.company_id=$company_id AND journal.branch_id=$branch_id AND journal.location_id=$location_id AND journal.journal_status='active' AND journal.postingDate BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND coa.typeAcc=3 UNION SELECT coa.gl_code,coa.gl_label,credit.credit_amount AS amount FROM erp_acc_credit AS credit INNER JOIN erp_acc_journal AS journal ON credit.journal_id=journal.id LEFT JOIN erp_acc_coa_1_table AS coa ON credit.glId=coa.id WHERE journal.company_id=$company_id AND journal.branch_id=$branch_id AND journal.location_id=$location_id AND journal.journal_status='active' AND journal.postingDate BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND coa.typeAcc=3) AS temp_table;", true),

        "financial_data" => queryGet("SELECT temp_table2.id,temp_table2.gl_code,temp_table2.gl_label,temp_table2.lvl,temp_table2.p_id,SUM(temp_table2.expense_amount) AS expence FROM (SELECT chart.id,chart.gl_code,chart.gl_label,chart.lvl,chart.p_id,temp_table.amount AS expense_amount FROM erp_acc_coa_1_table AS chart LEFT JOIN (SELECT coa.gl_code,coa.gl_label,SUM(debit.debit_amount) AS amount FROM erp_acc_debit AS debit INNER JOIN erp_acc_journal AS journal ON debit.journal_id=journal.id LEFT JOIN erp_acc_coa_1_table AS coa ON debit.glId=coa.id WHERE journal.company_id=$company_id AND journal.branch_id=$branch_id AND journal.location_id=$location_id AND journal.journal_status='active' AND journal.postingDate BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND coa.typeAcc=4 GROUP BY coa.gl_code,coa.gl_label) AS temp_table ON chart.gl_code=temp_table.gl_code WHERE chart.typeAcc=4
        UNION
        SELECT chart.id,chart.gl_code,chart.gl_label,chart.lvl,chart.p_id,temp_table.amount AS expense_amount FROM erp_acc_coa_1_table AS chart LEFT JOIN (SELECT coa.gl_code,coa.gl_label,SUM(credit.credit_amount)*(-1) AS amount FROM erp_acc_credit AS credit INNER JOIN erp_acc_journal AS journal ON credit.journal_id=journal.id LEFT JOIN erp_acc_coa_1_table AS coa ON credit.glId=coa.id WHERE journal.company_id=$company_id AND journal.branch_id=$branch_id AND journal.location_id=$location_id AND journal.journal_status='active' AND journal.postingDate BETWEEN '" . $fromDate . "' AND '" . $toDate . "' AND coa.typeAcc=4 GROUP BY coa.gl_code,coa.gl_label) AS temp_table ON chart.gl_code=temp_table.gl_code WHERE chart.typeAcc=4) AS temp_table2 GROUP BY temp_table2.id,temp_table2.gl_code,temp_table2.gl_label,temp_table2.lvl,temp_table2.p_id ORDER BY temp_table2.lvl desc;", true)
    ];
} else {
};


// $payload["x"] = queryGet("", true);


echo json_encode($payload, true);
